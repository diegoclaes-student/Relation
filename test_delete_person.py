#!/usr/bin/env python3
"""
Test script: Create a person with relations, then delete and verify cleanup
"""

from database.persons import person_repository
from database.relations import relation_repository
from services.history import history_service
from services.graph_builder import graph_builder

print("=" * 70)
print("TEST: Delete Person with Relations")
print("=" * 70)

# 1. Create a test person
print("\n1Ô∏è‚É£ Creating test person 'Test Delete User'...")
success, msg = person_repository.create(name="Test Delete User")
print(f"   Result: {msg}")

if not success:
    print("   ‚ÑπÔ∏è  Person might already exist, trying to continue...")
    test_person = person_repository.read_by_name("Test Delete User")
else:
    test_person = person_repository.read_by_name("Test Delete User")

if not test_person:
    print("   ‚ùå ERROR: Could not create/find test person!")
    exit(1)

print(f"   ‚úÖ Person created with ID: {test_person['id']}")

# 2. Get an existing person to create relations with
print("\n2Ô∏è‚É£ Getting existing persons...")
persons = person_repository.read_all()
other_persons = [p for p in persons if p['id'] != test_person['id']][:3]
print(f"   Found {len(persons)} persons, will use {len(other_persons)} for relations")

# 3. Create some relations
print("\n3Ô∏è‚É£ Creating relations...")
relations_created = 0
for other in other_persons:
    success, msg = relation_repository.create(
        person1=test_person['name'],
        person2=other['name'],
        relation_type=0  # Bisou
    )
    if success:
        relations_created += 1
        print(f"   ‚úÖ Relation: {test_person['name']} ‚Üî {other['name']}")

print(f"   Total relations created: {relations_created}")

# 4. Verify relations exist
print("\n4Ô∏è‚É£ Verifying relations in database...")
all_relations = relation_repository.read_all()
test_relations = [r for r in all_relations if r[0] == test_person['name'] or r[1] == test_person['name']]
print(f"   ‚úÖ Found {len(test_relations)} relations for {test_person['name']}")

# 5. Delete the person (with cascade)
print(f"\n5Ô∏è‚É£ Deleting person '{test_person['name']}' (with cascade)...")
success, msg = person_repository.delete(test_person['id'], cascade=True)
print(f"   Result: {msg}")

if not success:
    print("   ‚ùå ERROR: Deletion failed!")
    exit(1)

# 6. Verify person is gone
print("\n6Ô∏è‚É£ Verifying person was deleted...")
check_person = person_repository.read_by_name("Test Delete User")
if check_person:
    print(f"   ‚ùå ERROR: Person still exists: {check_person}")
else:
    print(f"   ‚úÖ Person successfully deleted from database")

# 7. Verify relations are gone
print("\n7Ô∏è‚É£ Verifying relations were deleted...")
all_relations = relation_repository.read_all()
check_relations = [r for r in all_relations if r[0] == "Test Delete User" or r[1] == "Test Delete User"]
if check_relations:
    print(f"   ‚ùå ERROR: {len(check_relations)} relations still exist:")
    for rel in check_relations:
        print(f"      - {rel}")
else:
    print(f"   ‚úÖ All relations successfully deleted")

# 8. Clear graph cache
print("\n8Ô∏è‚É£ Clearing graph cache...")
graph_builder.clear_cache()
print(f"   ‚úÖ Cache cleared")

# 9. Final verification
print("\n9Ô∏è‚É£ Final database state:")
final_persons = person_repository.read_all()
final_relations = relation_repository.read_all(deduplicate=True)
print(f"   Total persons: {len(final_persons)}")
print(f"   Total relations: {len(final_relations)}")

print("\n" + "=" * 70)
print("‚úÖ TEST COMPLETED!")
print("=" * 70)

print("\nüìù Summary:")
print(f"   - Person created: Test Delete User (ID {test_person['id']})")
print(f"   - Relations created: {relations_created}")
print(f"   - Person deleted: {'‚úÖ Yes' if not check_person else '‚ùå No'}")
print(f"   - Relations cleaned: {'‚úÖ Yes' if not check_relations else '‚ùå No'}")

if not check_person and not check_relations:
    print("\n‚ú® All good! Person and relations deleted successfully.")
    print("\nüí° In the web UI:")
    print("   1. The person should be removed from the graph")
    print("   2. All edges connected to that person should disappear")
    print("   3. The graph should re-layout automatically")
else:
    print("\n‚ö†Ô∏è  Something went wrong, check the errors above.")
